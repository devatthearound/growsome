// 블로그 시스템용 Prisma 스키마 (기존 사용자 테이블 활용)
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-blog"
}

datasource db {
  provider = "postgresql"
  url      = env("BLOG_DATABASE_URL")
}

// 기존 사용자 테이블 활용 (읽기 전용)
model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique @db.VarChar(255)
  username     String    @db.VarChar(100)
  company_name String?   @map("company_name") @db.VarChar(200)
  position     String?   @db.VarChar(100)
  phone_number String    @map("phone_number") @db.VarChar(20)
  avatar       String?   @db.VarChar(255)
  status       String    @default("active") @db.VarChar(20)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // 블로그 관계
  contents Content[]
  comments Comment[]
  likes    Like[]

  @@map("users")
}

// 블로그 카테고리
model BlogCategory {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  name        String
  description String?
  isVisible   Boolean @default(true) @map("is_visible")
  sortOrder   Int     @default(0) @map("sort_order")

  // 타임스탬프
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 관계
  contents Content[]

  @@map("blog_categories")
}

// 블로그 컨텐츠
model Content {
  id           Int           @id @default(autoincrement())
  slug         String        @unique
  title        String
  contentBody  String        @map("content_body") // 실제 컨텐츠 내용
  authorId     Int           @map("author_id")
  categoryId   Int           @map("category_id")
  status       ContentStatus @default(DRAFT)
  isFeatured   Boolean       @default(false) @map("is_featured")
  isHero       Boolean       @default(false) @map("is_hero")
  thumbnailUrl String?       @map("thumbnail_url")

  // 통계
  viewCount    Int @default(0) @map("view_count")
  likeCount    Int @default(0) @map("like_count")
  commentCount Int @default(0) @map("comment_count")

  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")

  // 타임스탬프
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  publishedAt DateTime? @map("published_at")

  // 관계
  author   User         @relation(fields: [authorId], references: [id])
  category BlogCategory @relation(fields: [categoryId], references: [id])
  comments Comment[]
  likes    Like[]
  tags     ContentTag[]

  @@map("blog_contents")
}

// 태그
model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique

  // 관계
  contents ContentTag[]

  @@map("blog_tags")
}

// 컨텐츠-태그 관계 (Many-to-Many)
model ContentTag {
  contentId Int @map("content_id")
  tagId     Int @map("tag_id")

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentId, tagId])
  @@map("blog_content_tags")
}

// 댓글
model Comment {
  id         Int     @id @default(autoincrement())
  contentId  Int     @map("content_id")
  userId     Int     @map("user_id")
  parentId   Int?    @map("parent_id") // 대댓글을 위한 부모 댓글 ID
  body       String
  isApproved Boolean @default(false) @map("is_approved")

  // 타임스탬프
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 관계
  content Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("blog_comments")
}

// 좋아요
model Like {
  id        Int @id @default(autoincrement())
  contentId Int @map("content_id")
  userId    Int @map("user_id")

  // 타임스탬프
  createdAt DateTime @default(now()) @map("created_at")

  // 관계
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([contentId, userId])
  @@map("blog_likes")
}

// Enum 정의
enum ContentStatus {
  DRAFT
  PUBLISHED
  PRIVATE
}
