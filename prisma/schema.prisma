generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                  @id @default(autoincrement())
  email          String               @unique @db.VarChar(255)
  username       String               @db.VarChar(100)
  companyName    String?              @map("company_name") @db.VarChar(200)
  position       String?              @db.VarChar(100)
  phoneNumber    String               @map("phone_number") @db.VarChar(20)
  avatar         String?              @db.VarChar(255)
  status         String               @default("active") @db.VarChar(20)
  createdAt      DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  password       String?              @db.VarChar(255)
  role           String               @default("user") @db.VarChar(20)
  blog_comments  blog_comments[]
  blog_contents  blog_contents[]
  blog_likes     blog_likes[]
  courseProgress UserCourseProgress[]

  @@map("users")
}

model blog_categories {
  id            Int             @id @default(autoincrement())
  slug          String          @unique @db.VarChar(255)
  name          String          @db.VarChar(255)
  description   String?
  is_visible    Boolean?        @default(true)
  sort_order    Int?            @default(0)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  blog_contents blog_contents[]

  @@index([slug], map: "idx_blog_categories_slug")
  @@index([is_visible], map: "idx_blog_categories_visible")
}

model blog_comments {
  id                  Int             @id @default(autoincrement())
  content_id          Int
  user_id             Int
  parent_id           Int?
  body                String
  is_approved         Boolean?        @default(false)
  created_at          DateTime?       @default(now()) @db.Timestamp(6)
  updated_at          DateTime?       @default(now()) @db.Timestamp(6)
  blog_contents       blog_contents   @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blog_comments       blog_comments?  @relation("blog_commentsToblog_comments", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_blog_comments blog_comments[] @relation("blog_commentsToblog_comments")
  users               User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model blog_content_tags {
  content_id    Int
  tag_id        Int
  blog_contents blog_contents @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blog_tags     blog_tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([content_id, tag_id])
}

model blog_contents {
  id                Int                 @id @default(autoincrement())
  slug              String              @unique @db.VarChar(255)
  title             String              @db.VarChar(255)
  content_body      String
  author_id         Int
  category_id       Int
  is_featured       Boolean?            @default(false)
  is_hero           Boolean?            @default(false)
  thumbnail_url     String?
  view_count        Int?                @default(0)
  like_count        Int?                @default(0)
  comment_count     Int?                @default(0)
  meta_title        String?
  meta_description  String?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  published_at      DateTime?           @db.Timestamp(6)
  status            String?             @default("DRAFT") @db.VarChar(20)
  blog_comments     blog_comments[]
  blog_content_tags blog_content_tags[]
  users             User                @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog_categories   blog_categories     @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog_likes        blog_likes[]

  @@index([author_id], map: "idx_blog_contents_author")
  @@index([category_id], map: "idx_blog_contents_category")
  @@index([category_id], map: "idx_blog_contents_category_id")
  @@index([published_at], map: "idx_blog_contents_published")
  @@index([published_at], map: "idx_blog_contents_published_at")
  @@index([slug], map: "idx_blog_contents_slug")
  @@index([status], map: "idx_blog_contents_status")
}

model blog_likes {
  id            Int           @id @default(autoincrement())
  content_id    Int
  user_id       Int
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  blog_contents blog_contents @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([content_id, user_id])
}

model blog_tags {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(255)
  slug              String              @unique @db.VarChar(255)
  blog_content_tags blog_content_tags[]
}

model SurveyResponse {
  id                Int       @id @default(autoincrement())
  businessStage     String    @map("business_stage") @db.VarChar(50)
  mainConcern       String    @map("main_concern") @db.VarChar(50)
  currentWebsite    String    @map("current_website") @db.VarChar(50)
  desiredTimeline   String    @map("desired_timeline") @db.VarChar(50)
  budgetRange       String    @map("budget_range") @db.VarChar(50)
  dataCollection    String    @map("data_collection") @db.VarChar(50)
  desiredData       String    @map("desired_data") @db.VarChar(50)
  brandingSituation String    @map("branding_situation") @db.VarChar(50)
  brandDirection    String    @map("brand_direction") @db.VarChar(50)
  name              String    @db.VarChar(100)
  phone             String    @db.VarChar(20)
  email             String    @db.VarChar(255)
  company           String?   @db.VarChar(200)
  ipAddress         String?   @map("ip_address") @db.VarChar(45)
  userAgent         String?   @map("user_agent")
  referrer          String?   @db.VarChar(500)
  status            String    @default("pending") @db.VarChar(20)
  isProcessed       Boolean   @default(false) @map("is_processed")
  contactedAt       DateTime? @map("contacted_at") @db.Timestamptz(6)
  notes             String?
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([email], map: "idx_survey_responses_email")
  @@index([phone], map: "idx_survey_responses_phone")
  @@index([status], map: "idx_survey_responses_status")
  @@index([createdAt], map: "idx_survey_responses_created")
  @@index([isProcessed], map: "idx_survey_responses_processed")
  @@map("survey_responses")
}

model CourseCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?
  color       String?  @db.VarChar(7)
  sortOrder   Int      @default(0) @map("sort_order")
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  courses     Course[]

  @@index([slug], map: "idx_course_categories_slug")
  @@index([isVisible], map: "idx_course_categories_visible")
  @@index([sortOrder], map: "idx_course_categories_sort")
  @@map("course_categories")
}

model Course {
  id               Int                  @id @default(autoincrement())
  title            String               @db.VarChar(255)
  slug             String               @unique @db.VarChar(255)
  description      String?
  shortDescription String?              @map("short_description") @db.VarChar(500)
  vimeoId          String               @map("vimeo_id") @db.VarChar(50)
  vimeoUrl         String               @map("vimeo_url") @db.VarChar(500)
  thumbnailUrl     String?              @map("thumbnail_url") @db.VarChar(500)
  duration         Int?
  categoryId       Int                  @map("category_id")
  level            String               @default("beginner") @db.VarChar(20)
  tags             String[]             @db.VarChar(50)
  isPublic         Boolean              @default(false) @map("is_public")
  isPremium        Boolean              @default(true) @map("is_premium")
  isVisible        Boolean              @default(true) @map("is_visible")
  sortOrder        Int                  @default(0) @map("sort_order")
  viewCount        Int                  @default(0) @map("view_count")
  likeCount        Int                  @default(0) @map("like_count")
  createdAt        DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  publishedAt      DateTime?            @map("published_at") @db.Timestamptz(6)
  category         CourseCategory       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userProgress     UserCourseProgress[]

  @@index([slug], map: "idx_courses_slug")
  @@index([categoryId], map: "idx_courses_category")
  @@index([isVisible], map: "idx_courses_visible")
  @@index([isPremium], map: "idx_courses_premium")
  @@index([isPublic], map: "idx_courses_public")
  @@index([sortOrder], map: "idx_courses_sort")
  @@index([publishedAt], map: "idx_courses_published")
  @@map("courses")
}

model UserCourseProgress {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  courseId     Int       @map("course_id")
  isCompleted  Boolean   @default(false) @map("is_completed")
  watchTime    Int       @default(0) @map("watch_time")
  lastPosition Int       @default(0) @map("last_position")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  completedAt  DateTime? @map("completed_at") @db.Timestamptz(6)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, courseId])
  @@index([userId], map: "idx_user_course_progress_user")
  @@index([courseId], map: "idx_user_course_progress_course")
  @@index([isCompleted], map: "idx_user_course_progress_completed")
  @@map("user_course_progress")
}

model QAIssue {
  id            Int      @id @default(autoincrement())
  issueNumber   String   @unique @map("issue_number") @db.VarChar(20)
  url           String   @db.VarChar(500)
  page          String?  @db.VarChar(255)
  location      String   @db.VarChar(255)
  category      String   @db.VarChar(20)
  description   String
  status        String   @default("open") @db.VarChar(20)
  priority      String   @default("P2") @db.VarChar(5)
  assignee      String?  @db.VarChar(100)
  createdBy     String   @map("created_by") @db.VarChar(100)
  screenshotUrl String?  @map("screenshot_url") @db.VarChar(500)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([status], map: "idx_qa_issues_status")
  @@index([category], map: "idx_qa_issues_category")
  @@index([priority], map: "idx_qa_issues_priority")
  @@index([assignee], map: "idx_qa_issues_assignee")
  @@index([createdAt], map: "idx_qa_issues_created")
  @@map("qa_issues")
}
