generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(255)
  username      String          @db.VarChar(100)
  password      String?         @db.VarChar(255)
  companyName   String?         @map("company_name") @db.VarChar(200)
  position      String?         @db.VarChar(100)
  phoneNumber   String          @map("phone_number") @db.VarChar(20)
  avatar        String?         @db.VarChar(255)
  status        String          @default("active") @db.VarChar(20)
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  blog_comments blog_comments[]
  blog_contents blog_contents[]
  blog_likes    blog_likes[]

  @@map("users")
}

model blog_categories {
  id            Int             @id @default(autoincrement())
  slug          String          @unique @db.VarChar(255)
  name          String          @db.VarChar(255)
  description   String?
  is_visible    Boolean?        @default(true)
  sort_order    Int?            @default(0)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  blog_contents blog_contents[]

  @@index([slug], map: "idx_blog_categories_slug")
  @@index([is_visible], map: "idx_blog_categories_visible")
}

model blog_comments {
  id                  Int             @id @default(autoincrement())
  content_id          Int
  user_id             Int
  parent_id           Int?
  body                String
  is_approved         Boolean?        @default(false)
  created_at          DateTime?       @default(now()) @db.Timestamp(6)
  updated_at          DateTime?       @default(now()) @db.Timestamp(6)
  blog_contents       blog_contents   @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blog_comments       blog_comments?  @relation("blog_commentsToblog_comments", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_blog_comments blog_comments[] @relation("blog_commentsToblog_comments")
  users               User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model blog_content_tags {
  content_id    Int
  tag_id        Int
  blog_contents blog_contents @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blog_tags     blog_tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([content_id, tag_id])
}

model blog_contents {
  id                Int                 @id @default(autoincrement())
  slug              String              @unique @db.VarChar(255)
  title             String              @db.VarChar(255)
  content_body      String
  author_id         Int
  category_id       Int
  status            String?             @default("DRAFT") @db.VarChar(20)
  is_featured       Boolean?            @default(false)
  is_hero           Boolean?            @default(false)
  thumbnail_url     String?
  view_count        Int?                @default(0)
  like_count        Int?                @default(0)
  comment_count     Int?                @default(0)
  meta_title        String?
  meta_description  String?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  published_at      DateTime?           @db.Timestamp(6)
  blog_comments     blog_comments[]
  blog_content_tags blog_content_tags[]
  users             User                @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog_categories   blog_categories     @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog_likes        blog_likes[]

  @@index([author_id], map: "idx_blog_contents_author")
  @@index([category_id], map: "idx_blog_contents_category")
  @@index([category_id], map: "idx_blog_contents_category_id")
  @@index([published_at], map: "idx_blog_contents_published")
  @@index([published_at], map: "idx_blog_contents_published_at")
  @@index([slug], map: "idx_blog_contents_slug")
  @@index([status], map: "idx_blog_contents_status")
}

model blog_likes {
  id            Int           @id @default(autoincrement())
  content_id    Int
  user_id       Int
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  blog_contents blog_contents @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([content_id, user_id])
}

model blog_tags {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(255)
  slug              String              @unique @db.VarChar(255)
  blog_content_tags blog_content_tags[]
}


