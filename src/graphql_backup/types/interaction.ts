// Comment 및 Interaction 타입 정의\nimport { builder } from '../builder'\n\n// Comment 모델 타입\nbuilder.prismaObject('Comment', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    contentId: t.exposeInt('contentId'),\n    userId: t.exposeString('userId'),\n    parentCommentId: t.exposeInt('parentCommentId', { nullable: true }),\n    commentText: t.exposeString('commentText'),\n    isDeleted: t.exposeBoolean('isDeleted'),\n    createdAt: t.expose('createdAt', { type: 'DateTime' }),\n    updatedAt: t.expose('updatedAt', { type: 'DateTime' }),\n    \n    // Relations\n    content: t.relation('content'),\n    user: t.relation('user'),\n    parentComment: t.relation('parentComment', { nullable: true }),\n    replies: t.relation('replies'),\n    \n    // Computed fields\n    replyCount: t.int({\n      resolve: async (comment, _, { prisma }) => {\n        return await prisma.comment.count({\n          where: { \n            parentCommentId: comment.id,\n            isDeleted: false\n          }\n        })\n      }\n    }),\n    \n    canEdit: t.boolean({\n      args: {\n        currentUserId: t.arg.string()\n      },\n      resolve: (comment, { currentUserId }) => {\n        return comment.userId === currentUserId\n      }\n    })\n  })\n})\n\n// UserInteraction 모델 타입\nbuilder.prismaObject('UserInteraction', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    userId: t.exposeString('userId'),\n    contentId: t.exposeInt('contentId'),\n    type: t.expose('type', { type: InteractionType }),\n    createdAt: t.expose('createdAt', { type: 'DateTime' }),\n    \n    // Relations\n    user: t.relation('user'),\n    content: t.relation('content')\n  })\n})\n\n// InteractionType enum\nconst InteractionType = builder.enumType('InteractionType', {\n  values: ['VIEW', 'LIKE', 'BOOKMARK', 'SHARE'] as const,\n})\n\n// Banner 모델 타입\nbuilder.prismaObject('Banner', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    imageUrl: t.exposeString('imageUrl'),\n    linkUrl: t.exposeString('linkUrl', { nullable: true }),\n    location: t.expose('location', { type: BannerLocation }),\n    isActive: t.exposeBoolean('isActive'),\n    sortOrder: t.exposeInt('sortOrder'),\n    startDate: t.expose('startDate', { type: 'DateTime', nullable: true }),\n    endDate: t.expose('endDate', { type: 'DateTime', nullable: true }),\n    createdAt: t.expose('createdAt', { type: 'DateTime' }),\n    updatedAt: t.expose('updatedAt', { type: 'DateTime' }),\n    \n    // Computed fields\n    isCurrentlyActive: t.boolean({\n      resolve: (banner) => {\n        if (!banner.isActive) return false\n        \n        const now = new Date()\n        const isAfterStart = !banner.startDate || banner.startDate <= now\n        const isBeforeEnd = !banner.endDate || banner.endDate >= now\n        \n        return isAfterStart && isBeforeEnd\n      }\n    })\n  })\n})\n\n// BannerLocation enum\nconst BannerLocation = builder.enumType('BannerLocation', {\n  values: ['HOME', 'CATEGORY', 'TAG', 'TOP', 'SIDE'] as const,\n})\n\n// Comment 입력 타입들\nconst CreateCommentInput = builder.inputType('CreateCommentInput', {\n  fields: (t) => ({\n    contentId: t.int({ required: true }),\n    parentCommentId: t.int(),\n    commentText: t.string({ required: true }),\n  })\n})\n\nconst UpdateCommentInput = builder.inputType('UpdateCommentInput', {\n  fields: (t) => ({\n    commentText: t.string({ required: true }),\n  })\n})\n\n// Banner 입력 타입들\nconst CreateBannerInput = builder.inputType('CreateBannerInput', {\n  fields: (t) => ({\n    imageUrl: t.string({ required: true }),\n    linkUrl: t.string(),\n    location: t.field({ type: BannerLocation, required: true }),\n    isActive: t.boolean(),\n    sortOrder: t.int(),\n    startDate: t.field({ type: 'DateTime' }),\n    endDate: t.field({ type: 'DateTime' }),\n  })\n})\n\nconst UpdateBannerInput = builder.inputType('UpdateBannerInput', {\n  fields: (t) => ({\n    imageUrl: t.string(),\n    linkUrl: t.string(),\n    location: t.field({ type: BannerLocation }),\n    isActive: t.boolean(),\n    sortOrder: t.int(),\n    startDate: t.field({ type: 'DateTime' }),\n    endDate: t.field({ type: 'DateTime' }),\n  })\n})\n\nexport { \n  InteractionType,\n  BannerLocation,\n  CreateCommentInput,\n  UpdateCommentInput,\n  CreateBannerInput,\n  UpdateBannerInput\n}\n