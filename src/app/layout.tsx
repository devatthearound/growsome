"use client"
// import type { Metadata } from "next";
import Header from './components/layout/Header';
import Footer from './components/layout/Footer';
import BottomNav from './components/layout/BottomNav';
import SubscribePopup from './components/common/SubscribePopup';
import { Geist, Geist_Mono } from "next/font/google";
import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import "./globals.css";
import styled from 'styled-components';
import StyledComponentsRegistry from './registry';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const [isSubscribePopupOpen, setIsSubscribePopupOpen] = useState(false);


  const handleSubscribeClick = () => {
    setIsSubscribePopupOpen(true);
  };

  const handleCloseSubscribe = () => {
    setIsSubscribePopupOpen(false);
  };


  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <StyledComponentsRegistry>
          <AppContainer>
            <Header 
              onSubscribeClick={handleSubscribeClick}
              onInquiryClick={() => router.push('/inquiry')}  
            />
            <Main>
              {children}
            </Main>
          <Footer />
          <BottomNav />
          {isSubscribePopupOpen && (
          <SubscribePopup onClose={handleCloseSubscribe} />
          )}
        </AppContainer>
        </StyledComponentsRegistry>
      </body>
    </html>
  );
}

const AppContainer = styled.div`
  min-height: 100vh;
  display: flex;
  flex-direction: column;
`;

const Main = styled.main`
  flex: 1;
  padding-bottom: 60px;

  @media (min-width: 769px) {
    padding-bottom: 0;
  }
`;
