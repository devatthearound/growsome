'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport styled, { ThemeProvider, keyframes } from 'styled-components';\nimport { useRouter } from 'next/navigation';\nimport { growsomeTheme } from '@/components/design-system/theme';\nimport { Typography } from '@/components/design-system/Typography';\nimport { ColumnBox, RowBox, Container } from '@/components/design-system/Layout';\nimport { GreenButton, SecondaryButton } from '@/components/design-system/Button';\n\ninterface SurveyData {\n  businessStage: string;\n  mainConcern: string;\n  currentWebsite: string;\n  desiredTimeline: string;\n  budgetRange: string;\n  dataCollection: string;\n  desiredData: string;\n  brandingSituation: string;\n  brandDirection: string;\n  name: string;\n  phone: string;\n  email: string;\n  company: string;\n}\n\nconst TypeformSurvey = () => {\n  const router = useRouter();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState<Partial<SurveyData>>({});\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const questions = [\n    {\n      id: 'businessStage' as keyof SurveyData,\n      type: 'choice',\n      question: '현재 비즈니스 단계는?',\n      description: '현재 상황을 정확히 파악해보겠습니다',\n      options: [\n        { value: 'idea', label: '아이디어만 있음 (예비창업)' },\n        { value: 'preparing', label: '서비스 런칭 준비중' },\n        { value: 'operating_small', label: '서비스 운영중 (월매출 1억 미만)' },\n        { value: 'operating_large', label: '성장 단계 (월매출 1억 이상)' }\n      ]\n    },\n    {\n      id: 'mainConcern' as keyof SurveyData,\n      type: 'choice',\n      question: '현재 가장 큰 고민은?',\n      description: '핵심 문제점을 파악해보겠습니다',\n      options: [\n        { value: 'idea_to_service', label: '아이디어를 실제 서비스로 만들고 싶다' },\n        { value: 'outdated_service', label: '있는 서비스가 너무 구식이다' },\n        { value: 'data_utilization', label: '고객은 있는데 데이터 활용을 못하겠다' },\n        { value: 'brand_differentiation', label: '브랜드 차별화가 안 된다' }\n      ]\n    },\n    {\n      id: 'currentWebsite' as keyof SurveyData,\n      type: 'choice',\n      question: '현재 웹사이트/앱 상황은?',\n      description: 'AI 개발 관련 요구사항을 확인해보겠습니다',\n      options: [\n        { value: 'none', label: '없음 (처음 만들 예정)' },\n        { value: 'old_tech', label: '있지만 2020년 이전 기술' },\n        { value: 'no_ai', label: '있지만 AI 기능 없음' },\n        { value: 'partial_ai', label: 'AI 일부 적용됨' }\n      ]\n    },\n    {\n      id: 'desiredTimeline' as keyof SurveyData,\n      type: 'choice',\n      question: '원하는 완성 시기는?',\n      description: '프로젝트 일정을 계획해보겠습니다',\n      options: [\n        { value: '2weeks', label: '2주 내 (초급속)' },\n        { value: '1month', label: '1개월 내 (급속)' },\n        { value: '2-3months', label: '2-3개월 (일반)' },\n        { value: '6months', label: '6개월 이상 (여유)' }\n      ]\n    },\n    {\n      id: 'budgetRange' as keyof SurveyData,\n      type: 'choice',\n      question: '예상 투자 규모는?',\n      description: '적정 예산 범위를 확인해보겠습니다',\n      options: [\n        { value: 'under_1000', label: '1,000만원 미만' },\n        { value: '1000-2000', label: '1,000-2,000만원' },\n        { value: '2000-3500', label: '2,000-3,500만원' },\n        { value: 'over_3500', label: '3,500만원 이상' }\n      ]\n    },\n    {\n      id: 'dataCollection' as keyof SurveyData,\n      type: 'choice',\n      question: '현재 데이터 수집 현황은?',\n      description: '데이터 분석 요구사항을 파악해보겠습니다',\n      options: [\n        { value: 'none', label: '전혀 안함' },\n        { value: 'basic_ga', label: 'GA 정도만 설치' },\n        { value: 'basic_tools', label: '기본적인 분석 도구 사용' },\n        { value: 'advanced', label: '고도화된 분석 시스템 운영' }\n      ]\n    },\n    {\n      id: 'desiredData' as keyof SurveyData,\n      type: 'choice',\n      question: '가장 알고 싶은 데이터는?',\n      description: '데이터 활용 방향을 파악해보겠습니다',\n      options: [\n        { value: 'traffic_source', label: '고객이 어디서 오는지' },\n        { value: 'content_preference', label: '어떤 콘텐츠를 좋아하는지' },\n        { value: 'purchase_timing', label: '언제 구매 결정하는지' },\n        { value: 'competitive_position', label: '경쟁사 대비 우리 위치' }\n      ]\n    },\n    {\n      id: 'brandingSituation' as keyof SurveyData,\n      type: 'choice',\n      question: '현재 브랜딩 상황은?',\n      description: '브랜딩 관련 요구사항을 확인해보겠습니다',\n      options: [\n        { value: 'no_logo', label: '로고도 없음' },\n        { value: 'inconsistent', label: '로고는 있지만 일관성 없음' },\n        { value: 'no_differentiation', label: '브랜드는 있지만 차별화 안됨' },\n        { value: 'digital_expansion', label: '브랜딩은 괜찮지만 디지털 확장 필요' }\n      ]\n    },\n    {\n      id: 'brandDirection' as keyof SurveyData,\n      type: 'choice',\n      question: '가장 원하는 브랜드 방향은?',\n      description: '브랜드 아이덴티티 방향성을 설정해보겠습니다',\n      options: [\n        { value: 'professional', label: '신뢰감 있는 전문 브랜드' },\n        { value: 'friendly', label: '친근하고 접근하기 쉬운 브랜드' },\n        { value: 'innovative', label: '혁신적이고 트렌디한 브랜드' },\n        { value: 'premium', label: '프리미엄 럭셔리 브랜드' }\n      ]\n    },\n    {\n      id: 'name' as keyof SurveyData,\n      type: 'text',\n      question: '성함을 알려주세요',\n      description: '진단 결과를 전달받을 정보를 입력해주세요',\n      placeholder: '홍길동'\n    },\n    {\n      id: 'email' as keyof SurveyData,\n      type: 'email',\n      question: '이메일 주소를 입력해주세요',\n      description: '진단 결과 전송을 위해 필요합니다',\n      placeholder: 'example@email.com'\n    },\n    {\n      id: 'phone' as keyof SurveyData,\n      type: 'tel',\n      question: '연락처를 입력해주세요',\n      description: '24시간 내 개별 연락드립니다',\n      placeholder: '010-0000-0000'\n    },\n    {\n      id: 'company' as keyof SurveyData,\n      type: 'text',\n      question: '회사명을 입력해주세요 (선택)',\n      description: '더 정확한 진단을 위해 도움이 됩니다',\n      placeholder: '회사명 (선택사항)'\n    }\n  ];\n\n  const progress = ((currentQuestion + 1) / questions.length) * 100;\n\n  const handleAnswer = (value: string) => {\n    setAnswers(prev => ({ ...prev, [questions[currentQuestion].id]: value }));\n    \n    // 자동으로 다음 질문으로 이동 (선택형 질문의 경우)\n    if (questions[currentQuestion].type === 'choice') {\n      setTimeout(() => {\n        nextQuestion();\n      }, 600);\n    }\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setIsAnimating(true);\n      setTimeout(() => {\n        setCurrentQuestion(prev => prev + 1);\n        setIsAnimating(false);\n      }, 150);\n    } else {\n      // 설문 완료\n      handleSubmit();\n    }\n  };\n\n  const prevQuestion = () => {\n    if (currentQuestion > 0) {\n      setIsAnimating(true);\n      setTimeout(() => {\n        setCurrentQuestion(prev => prev - 1);\n        setIsAnimating(false);\n      }, 150);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setLoading(true);\n      \n      const response = await fetch('/api/survey', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(answers)\n      });\n      \n      const result = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(result.error || '서버 오류가 발생했습니다.');\n      }\n      \n      console.log('설문 제출 성공:', result);\n      \n      // 추천 결과를 쿼리 파라미터로 전달하며 결과 페이지로 이동\n      const queryParams = new URLSearchParams({\n        surveyId: result.surveyId?.toString() || 'temp',\n        recommendation: JSON.stringify(result.recommendations || {})\n      });\n      \n      router.push(`/diagnosis/result?${queryParams.toString()}`);\n      \n    } catch (error) {\n      console.error('설문 제출 오류:', error);\n      alert('설문 제출 중 오류가 발생했습니다. 다시 시도해주세요.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: KeyboardEvent) => {\n    if (e.key === 'Enter' && canProceed()) {\n      nextQuestion();\n    }\n  };\n\n  const canProceed = () => {\n    const currentAnswer = answers[questions[currentQuestion].id];\n    // company는 선택사항이므로 검증에서 제외\n    if (questions[currentQuestion].id === 'company') {\n      return true;\n    }\n    return currentAnswer && currentAnswer.toString().trim() !== '';\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [currentQuestion, answers]);\n\n  const currentQ = questions[currentQuestion];\n\n  return (\n    <ThemeProvider theme={growsomeTheme}>\n      <SurveyContainer>\n        {/* Progress Bar */}\n        <ProgressBarContainer>\n          <ProgressBar>\n            <ProgressFill $progress={progress} />\n          </ProgressBar>\n        </ProgressBarContainer>\n\n        {/* Main Content */}\n        <ContentContainer>\n          <Container>\n            <QuestionContainer \n              $isAnimating={isAnimating}\n            >\n              {/* Question Number */}\n              <QuestionMeta>\n                <Typography.TextM500 color={growsomeTheme.color.Primary600}>\n                  {currentQuestion + 1} → {questions.length}\n                </Typography.TextM500>\n              </QuestionMeta>\n\n              {/* Question Header */}\n              <QuestionHeader>\n                <ColumnBox $gap={1} $ai=\"center\">\n                  <Typography.DisplayS600 color={growsomeTheme.color.Black800} style={{textAlign: 'center', lineHeight: '1.2'}}>\n                    {currentQ.question}\n                  </Typography.DisplayS600>\n                  {currentQ.description && (\n                    <Typography.TextM400 color={growsomeTheme.color.Black600} style={{textAlign: 'center'}}>\n                      {currentQ.description}\n                    </Typography.TextM400>\n                  )}\n                </ColumnBox>\n              </QuestionHeader>\n\n              {/* Answer Options */}\n              <AnswerContainer>\n                {currentQ.type === 'choice' ? (\n                  // 선택형 질문\n                  <OptionsContainer>\n                    {currentQ.options?.map((option, index) => (\n                      <OptionCard\n                        key={option.value}\n                        $selected={answers[currentQ.id] === option.value}\n                        onClick={() => handleAnswer(option.value)}\n                        $delay={index * 100}\n                      >\n                        <OptionLabel>\n                          {String.fromCharCode(65 + index)}\n                        </OptionLabel>\n                        <OptionText>\n                          <Typography.TextM500 color={growsomeTheme.color.Black800}>\n                            {option.label}\n                          </Typography.TextM500>\n                        </OptionText>\n                        <OptionArrow $selected={answers[currentQ.id] === option.value}>\n                          →\n                        </OptionArrow>\n                      </OptionCard>\n                    ))}\n                  </OptionsContainer>\n                ) : (\n                  // 입력형 질문\n                  <InputContainer>\n                    <InputField\n                      type={currentQ.type}\n                      placeholder={currentQ.placeholder}\n                      value={answers[currentQ.id] || ''}\n                      onChange={(e) => handleAnswer(e.target.value)}\n                      autoFocus\n                    />\n                    <InputHint>\n                      <Typography.TextS400 color={growsomeTheme.color.Black600}>\n                        Press <KeyboardKey>Enter</KeyboardKey> to continue\n                      </Typography.TextS400>\n                    </InputHint>\n                  </InputContainer>\n                )}\n              </AnswerContainer>\n\n              {/* Next Button for text inputs */}\n              {currentQ.type !== 'choice' && (\n                <ButtonContainer>\n                  <GreenButton\n                    $size=\"large\"\n                    onClick={nextQuestion}\n                    disabled={!canProceed() || loading}\n                  >\n                    {loading ? '제출 중...' : \n                     currentQuestion === questions.length - 1 ? '진단 완료하기 🎉' : '다음 질문'}\n                  </GreenButton>\n                </ButtonContainer>\n              )}\n            </QuestionContainer>\n          </Container>\n        </ContentContainer>\n\n        {/* Navigation */}\n        <NavigationContainer>\n          {currentQuestion > 0 && (\n            <BackButton onClick={prevQuestion}>\n              <BackIcon>←</BackIcon>\n              <Typography.TextM500 color={growsomeTheme.color.Black600}>\n                이전\n              </Typography.TextM500>\n            </BackButton>\n          )}\n          \n          <div style={{flex: 1}} />\n          \n          <ProgressText>\n            <Typography.TextS400 color={growsomeTheme.color.Black600}>\n              {currentQuestion + 1} of {questions.length}\n            </Typography.TextS400>\n          </ProgressText>\n        </NavigationContainer>\n\n        {/* Loading overlay */}\n        {loading && (\n          <LoadingOverlay>\n            <LoadingSpinner />\n            <Typography.TextL500 color={growsomeTheme.color.White} style={{marginTop: '1rem'}}>\n              진단 결과를 생성하고 있습니다...\n            </Typography.TextL500>\n          </LoadingOverlay>\n        )}\n      </SurveyContainer>\n    </ThemeProvider>\n  );\n};\n\n// Animations\nconst slideIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst slideOut = keyframes`\n  from {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n`;\n\nconst progressAnimation = keyframes`\n  from {\n    width: 0%;\n  }\n`;\n\nconst spinAnimation = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\n// Styled Components\nconst SurveyContainer = styled.div`\n  min-height: 100vh;\n  background: ${growsomeTheme.color.White};\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nconst ProgressBarContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 50;\n  background: ${growsomeTheme.color.White};\n  border-bottom: 1px solid ${growsomeTheme.color.Gray200};\n`;\n\nconst ProgressBar = styled.div`\n  height: 4px;\n  background: ${growsomeTheme.color.Gray200};\n  position: relative;\n`;\n\nconst ProgressFill = styled.div<{ $progress: number }>`\n  height: 100%;\n  width: ${props => props.$progress}%;\n  background: linear-gradient(90deg, ${growsomeTheme.color.Primary500}, ${growsomeTheme.color.Green500});\n  transition: width 0.5s ease-out;\n  animation: ${progressAnimation} 0.5s ease-out;\n`;\n\nconst ContentContainer = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: ${growsomeTheme.spacing.xl} ${growsomeTheme.spacing.lg};\n  margin-top: 4px;\n  width: 100%;\n  \n  @media ${growsomeTheme.device.mobile} {\n    padding: ${growsomeTheme.spacing.lg} ${growsomeTheme.spacing.md};\n  }\n`;\n\nconst QuestionContainer = styled.div<{ $isAnimating: boolean }>`\n  max-width: 600px;\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n  animation: ${props => props.$isAnimating ? slideOut : slideIn} 0.3s ease-out;\n`;\n\nconst QuestionMeta = styled.div`\n  margin-bottom: ${growsomeTheme.spacing.lg};\n`;\n\nconst QuestionHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: ${growsomeTheme.spacing.lg};\n  margin-bottom: ${growsomeTheme.spacing.xl};\n  text-align: center;\n`;\n\nconst AnswerContainer = styled.div`\n  margin-bottom: ${growsomeTheme.spacing.xl};\n`;\n\nconst OptionsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${growsomeTheme.spacing.md};\n`;\n\nconst OptionCard = styled.button<{ $selected: boolean; $delay: number }>`\n  display: flex;\n  align-items: center;\n  gap: ${growsomeTheme.spacing.md};\n  padding: ${growsomeTheme.spacing.lg};\n  background: ${props => props.$selected ? growsomeTheme.color.Primary50 : growsomeTheme.color.White};\n  border: 2px solid ${props => props.$selected ? growsomeTheme.color.Primary500 : growsomeTheme.color.Gray200};\n  border-radius: ${growsomeTheme.radius.radius2};\n  text-align: left;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  animation: ${slideIn} 0.5s ease-out;\n  animation-delay: ${props => props.$delay}ms;\n  animation-fill-mode: both;\n  \n  &:hover {\n    border-color: ${growsomeTheme.color.Primary400};\n    background: ${growsomeTheme.color.Primary25};\n    transform: translateY(-2px);\n    box-shadow: ${growsomeTheme.shadow.Elevation1};\n  }\n  \n  &:active {\n    transform: translateY(0);\n  }\n`;\n\nconst OptionLabel = styled.div`\n  width: 32px;\n  height: 32px;\n  background: ${growsomeTheme.color.Primary100};\n  color: ${growsomeTheme.color.Primary600};\n  border-radius: ${growsomeTheme.radius.radius1};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: ${growsomeTheme.fontSize.TextM};\n  font-weight: ${growsomeTheme.fontWeight.SemiBold};\n  flex-shrink: 0;\n`;\n\nconst OptionText = styled.div`\n  flex: 1;\n`;\n\nconst OptionArrow = styled.div<{ $selected: boolean }>`\n  color: ${props => props.$selected ? growsomeTheme.color.Primary500 : growsomeTheme.color.Gray400};\n  font-size: 1.2rem;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${growsomeTheme.spacing.xl};\n  align-items: center;\n`;\n\nconst InputField = styled.input`\n  width: 100%;\n  max-width: 500px;\n  font-size: ${growsomeTheme.fontSize.TextXL};\n  padding: ${growsomeTheme.spacing.xl};\n  border: none;\n  border-bottom: 3px solid ${growsomeTheme.color.Gray300};\n  background: transparent;\n  outline: none;\n  transition: border-color 0.2s ease;\n  text-align: center;\n  \n  &:focus {\n    border-bottom-color: ${growsomeTheme.color.Primary500};\n  }\n  \n  &::placeholder {\n    color: ${growsomeTheme.color.Gray400};\n  }\n`;\n\nconst InputHint = styled.div`\n  text-align: center;\n`;\n\nconst KeyboardKey = styled.kbd`\n  background: ${growsomeTheme.color.Gray100};\n  padding: ${growsomeTheme.spacing.xs} ${growsomeTheme.spacing.sm};\n  border-radius: ${growsomeTheme.radius.radius1};\n  border: 1px solid ${growsomeTheme.color.Gray300};\n  font-size: ${growsomeTheme.fontSize.TextXS};\n  font-family: monospace;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst NavigationContainer = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  padding: ${growsomeTheme.spacing.xl};\n  background: ${growsomeTheme.color.White};\n  border-top: 1px solid ${growsomeTheme.color.Gray200};\n  z-index: 40;\n`;\n\nconst BackButton = styled.button`\n  display: flex;\n  align-items: center;\n  gap: ${growsomeTheme.spacing.sm};\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: ${growsomeTheme.spacing.sm};\n  border-radius: ${growsomeTheme.radius.radius1};\n  transition: background 0.2s ease;\n  \n  &:hover {\n    background: ${growsomeTheme.color.Gray100};\n  }\n`;\n\nconst BackIcon = styled.div`\n  font-size: 1.2rem;\n  color: ${growsomeTheme.color.Black600};\n`;\n\nconst ProgressText = styled.div`\n  text-align: right;\n`;\n\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n`;\n\nconst LoadingSpinner = styled.div`\n  width: 50px;\n  height: 50px;\n  border: 4px solid ${growsomeTheme.color.Gray300};\n  border-top: 4px solid ${growsomeTheme.color.Primary500};\n  border-radius: 50%;\n  animation: ${spinAnimation} 1s linear infinite;\n`;\n\nexport default TypeformSurvey;"