'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Link from 'next/link';\n\ninterface DatabaseStatus {\n  success: boolean;\n  tables: string[];\n  counts: {\n    categories: number;\n    posts: number;\n  };\n}\n\nconst SetupPage = () => {\n  const [status, setStatus] = useState<DatabaseStatus | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [initializing, setInitializing] = useState(false);\n\n  useEffect(() => {\n    checkDatabaseStatus();\n  }, []);\n\n  const checkDatabaseStatus = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/setup');\n      const data = await response.json();\n      setStatus(data);\n    } catch (error) {\n      console.error('데이터베이스 상태 확인 실패:', error);\n      setStatus({\n        success: false,\n        tables: [],\n        counts: { categories: 0, posts: 0 }\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const initializeDatabase = async () => {\n    if (!confirm('데이터베이스를 초기화하시겠습니까? 필요한 테이블과 기본 데이터가 생성됩니다.')) {\n      return;\n    }\n\n    try {\n      setInitializing(true);\n      const response = await fetch('/api/admin/setup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        alert('데이터베이스가 성공적으로 초기화되었습니다!');\n        checkDatabaseStatus(); // 상태 재확인\n      } else {\n        alert('데이터베이스 초기화 실패: ' + data.error);\n      }\n    } catch (error) {\n      console.error('데이터베이스 초기화 중 에러:', error);\n      alert('데이터베이스 초기화 중 오류가 발생했습니다.');\n    } finally {\n      setInitializing(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Header>\n        <h1>🔧 데이터베이스 설정</h1>\n        <Link href=\"/admin/blog\">\n          <BackButton>← 블로그 관리로 돌아가기</BackButton>\n        </Link>\n      </Header>\n\n      <StatusCard>\n        <h2>📊 데이터베이스 상태</h2>\n        \n        {loading ? (\n          <LoadingText>상태 확인 중...</LoadingText>\n        ) : (\n          <>\n            <StatusItem>\n              <StatusLabel>연결 상태:</StatusLabel>\n              <StatusValue success={status?.success}>\n                {status?.success ? '✅ 연결됨' : '❌ 연결 실패'}\n              </StatusValue>\n            </StatusItem>\n\n            <StatusItem>\n              <StatusLabel>테이블:</StatusLabel>\n              <StatusValue success={status?.tables.length ? status.tables.length > 0 : false}>\n                {status?.tables.length || 0}개 \n                {status?.tables.length ? `(${status.tables.join(', ')})` : ''}\n              </StatusValue>\n            </StatusItem>\n\n            <StatusItem>\n              <StatusLabel>카테고리 수:</StatusLabel>\n              <StatusValue success={true}>\n                {status?.counts.categories || 0}개\n              </StatusValue>\n            </StatusItem>\n\n            <StatusItem>\n              <StatusLabel>포스트 수:</StatusLabel>\n              <StatusValue success={true}>\n                {status?.counts.posts || 0}개\n              </StatusValue>\n            </StatusItem>\n          </>\n        )}\n      </StatusCard>\n\n      <ActionCard>\n        <h2>⚙️ 관리 작업</h2>\n        \n        <ActionItem>\n          <ActionDescription>\n            <h3>데이터베이스 초기화</h3>\n            <p>\n              블로그 운영에 필요한 테이블들을 생성하고 기본 카테고리를 추가합니다.\n              <br />\n              <strong>포함 사항:</strong> post_categories, posts, post_comments, post_likes 테이블\n            </p>\n          </ActionDescription>\n          <InitButton \n            onClick={initializeDatabase} \n            disabled={initializing}\n          >\n            {initializing ? '초기화 중...' : '🚀 데이터베이스 초기화'}\n          </InitButton>\n        </ActionItem>\n\n        <ActionItem>\n          <ActionDescription>\n            <h3>상태 새로고침</h3>\n            <p>현재 데이터베이스 상태를 다시 확인합니다.</p>\n          </ActionDescription>\n          <RefreshButton \n            onClick={checkDatabaseStatus} \n            disabled={loading}\n          >\n            {loading ? '확인 중...' : '🔄 상태 새로고침'}\n          </RefreshButton>\n        </ActionItem>\n      </ActionCard>\n\n      <InfoCard>\n        <h2>📝 사용 방법</h2>\n        <ol>\n          <li>먼저 <strong>\"데이터베이스 초기화\"</strong>를 클릭하여 필요한 테이블을 생성하세요.</li>\n          <li>초기화가 완료되면 블로그 관리 페이지에서 카테고리와 포스트를 관리할 수 있습니다.</li>\n          <li>문제가 발생하면 \"상태 새로고침\"으로 현재 상태를 확인하세요.</li>\n        </ol>\n      </InfoCard>\n    </Container>\n  );\n};\n\n// Styled Components\nconst Container = styled.div`\n  max-width: 800px;\n  margin: 2rem auto;\n  padding: 0 1rem;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  \n  h1 {\n    margin: 0;\n    color: #333;\n  }\n`;\n\nconst BackButton = styled.button`\n  padding: 0.5rem 1rem;\n  background: #6c757d;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  text-decoration: none;\n  \n  &:hover {\n    background: #5a6268;\n  }\n`;\n\nconst Card = styled.div`\n  background: white;\n  border-radius: 8px;\n  padding: 1.5rem;\n  margin-bottom: 1.5rem;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  \n  h2 {\n    margin: 0 0 1rem 0;\n    color: #333;\n  }\n`;\n\nconst StatusCard = styled(Card)``;\nconst ActionCard = styled(Card)``;\nconst InfoCard = styled(Card)``;\n\nconst StatusItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem 0;\n  border-bottom: 1px solid #eee;\n  \n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst StatusLabel = styled.span`\n  font-weight: 500;\n  color: #555;\n`;\n\nconst StatusValue = styled.span<{ success: boolean }>`\n  color: ${props => props.success ? '#28a745' : '#dc3545'};\n  font-weight: 500;\n`;\n\nconst LoadingText = styled.div`\n  text-align: center;\n  color: #666;\n  padding: 1rem;\n`;\n\nconst ActionItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 0;\n  border-bottom: 1px solid #eee;\n  \n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst ActionDescription = styled.div`\n  flex: 1;\n  margin-right: 1rem;\n  \n  h3 {\n    margin: 0 0 0.5rem 0;\n    color: #333;\n  }\n  \n  p {\n    margin: 0;\n    color: #666;\n    font-size: 0.9rem;\n    line-height: 1.4;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n\nconst InitButton = styled(Button)`\n  background: #28a745;\n  color: white;\n  \n  &:hover:not(:disabled) {\n    background: #218838;\n  }\n`;\n\nconst RefreshButton = styled(Button)`\n  background: #007bff;\n  color: white;\n  \n  &:hover:not(:disabled) {\n    background: #0056b3;\n  }\n`;\n\nexport default SetupPage;\n