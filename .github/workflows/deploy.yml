
# github/workflows/deploy.yml
name: Deploy Growsome

on:
 push:
   branches: [ master ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: growsome  # ECR 저장소 이름
  ECS_CLUSTER: growsome    # ECS 클러스터 이름
  ECS_SERVICE: growsome-landing-service  # ECS 서비스 이름

jobs:
 deploy:
   runs-on: ubuntu-latest
   timeout-minutes: 30
   steps:
   - name: Checkout code
     uses: actions/checkout@v4
     
   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v4
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: ${{ env.AWS_REGION }}
       mask-aws-account-id: true
   
   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v2
     with:
       mask-password: true

   - name: Debug - Check Node.js environment
     run: |
       echo "Node.js version:"
       node --version
       echo "npm version:"
       npm --version
       echo "Environment variables:"
       env | grep -E "NODE|NPM" || echo "No Node/NPM env vars"
       echo "Checking package.json scripts:"
       cat package.json | grep -A 10 -B 2 '"scripts"'
       
   - name: Debug - Check files
     run: |
       echo "Checking important files..."
       ls -la
       echo "Checking package.json:"
       head -20 package.json
       echo "Checking if .env.production exists:"
       ls -la .env.production || echo ".env.production not found"
       echo "Checking Prisma schema:"
       ls -la prisma/ || echo "Prisma directory not found"
       
   - name: Debug - Test local build first
     run: |
       echo "Testing if we can build locally first..."
       echo "Node version: $(node --version)"
       echo "NPM version: $(npm --version)"
       
       echo "Checking source file structure..."
       find src -type f -name "*.ts" -o -name "*.tsx" | head -20
       
       echo "Installing dependencies..."
       npm ci
       
       echo "Generating Prisma client..."
       npx prisma generate
       
       echo "Testing TypeScript compilation..."
       npx tsc --noEmit || {
         echo "⚠️ TypeScript compilation issues found"
       }
       
       echo "Attempting local build..."
       NODE_ENV=production npm run build 2>&1 | tee local-build.log || {
         echo "❌ Local build failed!"
         echo "Full build log:"
         cat local-build.log
         echo "Checking specific import errors:"
         grep -n "Module not found" local-build.log || echo "No module errors found"
         exit 1
       }
       
       echo "✅ Local build successful!"
       echo "Cleaning up for Docker build..."
       rm -rf .next node_modules
       
   - name: Set up Docker Buildx
     uses: docker/setup-buildx-action@v3
     
   - name: Create env file
     run: |
       echo "${{ secrets.ENV_PRODUCTION }}" > .env.production
       
   - name: Build and push image to Amazon ECR
     env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       IMAGE_TAG: growsome-landing-latest
       NODE_ENV: production
       DOCKER_BUILDKIT: 1
     run: |
       echo "Starting Docker build process..."
       echo "ECR Registry: $ECR_REGISTRY"
       echo "Repository: $ECR_REPOSITORY"
       echo "Image Tag: $IMAGE_TAG"
       
       echo "Building Docker image..."
       docker buildx build \
         --platform=linux/amd64 \
         --progress=plain \
         --build-arg NODE_ENV=production \
         --no-cache \
         -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
         --load \
         . 2>&1 | tee build.log
       
       if [ ${PIPESTATUS[0]} -ne 0 ]; then
         echo "❌ Docker build failed!"
         echo "Last 50 lines of build log:"
         tail -50 build.log
         exit 1
       fi
       
       echo "✅ Docker build successful!"
       echo "Pushing to ECR..."
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       
       if [ $? -ne 0 ]; then
         echo "❌ Docker push failed!"
         exit 1
       fi
       
       echo "✅ Docker push successful!"
       echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
       
   - name: Force new deployment  
     run: |
       aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment