
# github/workflows/deploy.yml
name: Deploy Growsome

on:
 push:
   branches: [ master ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: growsome  # ECR 저장소 이름
  ECS_CLUSTER: growsome    # ECS 클러스터 이름
  ECS_SERVICE: growsome-landing-service  # ECS 서비스 이름

jobs:
 deploy:
   runs-on: ubuntu-latest
   timeout-minutes: 30
   steps:
   - name: Checkout code
     uses: actions/checkout@v4
     
   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v4
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: ${{ env.AWS_REGION }}
       mask-aws-account-id: true
   
   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v2
     with:
       mask-password: true

   - name: Set up Docker Buildx
     uses: docker/setup-buildx-action@v3
     
   - name: Create env file
     run: |
       echo "${{ secrets.ENV_PRODUCTION }}" > .env.production
       
   - name: Build and push image to Amazon ECR
     env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       IMAGE_TAG: growsome-landing-latest
       NODE_ENV: production
       DOCKER_BUILDKIT: 1
     run: |
       echo "Building Docker image with improved caching..."
       docker buildx build \
         --platform=linux/amd64 \
         --progress=plain \
         --build-arg NODE_ENV=production \
         --cache-from=type=gha \
         --cache-to=type=gha,mode=max \
         -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
         --load \
         . || { echo "Docker build failed"; exit 1; }
       
       echo "Pushing to ECR..."
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || { echo "Docker push failed"; exit 1; }
       
       echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
       echo "Docker build and push completed successfully"
       
   - name: Force new deployment  
     run: |
       aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment