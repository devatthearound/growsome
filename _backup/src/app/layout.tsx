"use client"
// import type { Metadata } from "next";
import Header from './components/layout/Header';
import Footer from './components/layout/Footer';
import SubscribePopup from './components/common/SubscribePopup';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import "./globals.css";
import styled, { createGlobalStyle } from 'styled-components';
import StyledComponentsRegistry from '../lib/registry';
import { AuthProvider } from './contexts/AuthContext';
import { CoupangApiProvider } from './contexts/CoupangApiContext';
import { EmailProvider } from './contexts/EmailContext';

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const GlobalStyle = createGlobalStyle`
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
  }
`;

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const [isSubscribePopupOpen, setIsSubscribePopupOpen] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const handleSubscribeClick = () => {
    setIsSubscribePopupOpen(true);
  };

  const handleCloseSubscribe = () => {
    setIsSubscribePopupOpen(false);
  };

  if (!isMounted) {
    return null; // 또는 로딩 상태를 표시하는 컴포넌트
  }

  return (
    <html lang="ko">
      
      <body 
      // className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <StyledComponentsRegistry>
          <GlobalStyle />
          <AuthProvider>
          <CoupangApiProvider>
            <EmailProvider>

            <AppContainer>
              <Header 
                onSubscribeClick={handleSubscribeClick}
                onInquiryClick={() => router.push('/inquiry')}  
              />
              <Main>
                {children}
              </Main>
            <Footer />
            {isSubscribePopupOpen && (
              <SubscribePopup onClose={handleCloseSubscribe} />
            )}
          </AppContainer>
          </EmailProvider>
          </CoupangApiProvider>
          </AuthProvider>
        </StyledComponentsRegistry>
      </body>
    </html>
  );
}

const AppContainer = styled.div`
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  margin: 0;
  padding: 0;
`;

const Main = styled.main`
  flex: 1;
  margin: 0;
  
  @media (min-width: 769px) {
    padding-bottom: 0;
  }
`;
